package com.ecole.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ecole.model.Classe;
import com.ecole.model.Matiere;
import com.ecole.model.Professeur;

public class ProfesseurDao {
	private String url = "jdbc:postgresql://localhost:5432/Ecole";
	private String user = "postgres";
	private String password = "n141n4";
	
	private static final String INSERT_PROFESSEUR_SQL = 
			"INSERT INTO professeur" + "(prof_nom, prof_prenom) VALUES " + " (?, ?)";
	private static final String SELECT_PROFESSEUR_BY_ID = 
			"SELECT prof_id, prof_nom, prof_prenom, mat_nom, cls_nom FROM professeur WHERE prof_id=?";
	private static final String SELECT_ALL_PROFESSEUR = 
			" SELECT prof_id, prof_nom, prof_prenom, mat_nom, cls_nom FROM professeur  INNER JOIN j_mat_prof ON prof_id = jmp_prof_k  INNER JOIN matiere ON jmp_mat_k = mat_id INNER JOIN j_cls_jmp ON jcm_jmp_k = jmp_id\r\n"
			+ " INNER JOIN classe ON jcm_cls_k = cls_id  AND cls_id BETWEEN 1 AND 6  ORDER BY cls_id ASC, prof_nom ";
	private static final String DELETE_PROFESSEUR_SQL = 
			"DELETE FROM professeur WHERE prof_id = ?";
	private static final String UPDATE_PROFESSEUR_SQL = 
			"UPDATE professeur SET prof_nom = ?, prof_prenom = ? WHERE prof_id = ?";
	
	public ProfesseurDao() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	protected Connection getConnection() {
		Connection connection = null;
		
		try {
			Class.forName("org.postgresql.Driver");
			connection = DriverManager.getConnection(url, user, password);
		} 
		
		catch (Exception e) {
			e.printStackTrace();
			System.out.println("Connexion échouée");
			// TODO: handle exception
		}
		return connection;
		
	}
	
	// INSERT PROFESSEUR
	public void insertProfesseur(Professeur professeur) {
		System.out.println(INSERT_PROFESSEUR_SQL);
		
		try (Connection connection = getConnection();
			
			
			PreparedStatement pstmt = connection.prepareStatement(INSERT_PROFESSEUR_SQL)) {
			pstmt.setString(1, professeur.getProf_nom());
			pstmt.setString(2, professeur.getProf_prenom());
			
			System.out.println(pstmt);
			
			pstmt.executeUpdate();
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// SELECT PROFESSEUR BY ID
	public Professeur selectProfesseur(int prof_id) {
		
		Professeur professeur = null;
		
		try (Connection connection = getConnection();
			
			
			PreparedStatement pstmt = connection.prepareStatement(SELECT_PROFESSEUR_BY_ID)) {
			pstmt.setInt(1, prof_id);
			
			System.out.println(pstmt);
			
			ResultSet rs = pstmt.executeQuery();
			
			while (rs.next()) {
				String prof_nom = rs.getString("prof_nom");
				String prof_prenom = rs.getString("prof_prenom");
				String cls_nom = rs.getString("cls_nom");
				String mat_nom = rs.getString("mat_nom");
				professeur = new Professeur(prof_id,prof_nom, prof_prenom,cls_nom, mat_nom);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return professeur;
	}
	
	//SELECT ALL PROFESSEUR
	public List<Professeur> selectAllProfesseur() {
			
		List<Professeur> professeur = new ArrayList<>();
		List<Classe> classe = new ArrayList<>();
		List<Matiere> matiere = new ArrayList<>();
			
			try (Connection connection = getConnection(); 
				
				PreparedStatement pstmt = connection.prepareStatement(SELECT_ALL_PROFESSEUR)) {
				
				System.out.println(pstmt);
				
				ResultSet rs = pstmt.executeQuery();
				
				while (rs.next()) {
					int prof_id = rs.getInt("prof_id");
					String prof_nom = rs.getString("prof_nom");
					String prof_prenom = rs.getString("prof_prenom");
					
					String cls_nom = rs.getString("cls_nom");
					String mat_nom = rs.getString("mat_nom");
					
					professeur.add(new Professeur(prof_id,prof_nom, prof_prenom,cls_nom, mat_nom));
				}
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return professeur;
	}
	
	// UPDATE PROFESSEUR
	public boolean updateProfesseur(Professeur professeur) {
		boolean rowUpdated = false;
		
			try (Connection connection = getConnection();
				
				
				PreparedStatement pstmt = connection.prepareStatement(UPDATE_PROFESSEUR_SQL)) {
				
				System.out.println("Professeur mis à jour " + pstmt);
				
				pstmt.setString(1, professeur.getProf_nom());
				pstmt.setString(2, professeur.getProf_prenom());
				pstmt.setInt(3, professeur.getProf_id());
				
				rowUpdated = pstmt.executeUpdate() > 0;
				
			} catch (SQLException e) {
			}
			return rowUpdated;
	}
	
	// DELETE PROFESSEUR
	public boolean deleteProfesseur(int prof_id)  throws SQLException {
		boolean rowDeleted;
		
			try (Connection connection = getConnection(); 
				
				
				PreparedStatement pstmt = connection.prepareStatement(DELETE_PROFESSEUR_SQL)) {
				
				pstmt.setInt(1, prof_id);
				rowDeleted = pstmt.executeUpdate() > 0;
				System.out.println("Professeur mis à jour " + pstmt);
				
			} 
			return rowDeleted;
	}
}
